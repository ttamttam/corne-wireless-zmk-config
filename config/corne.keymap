/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define LAYER_default 0
#define LAYER_lower 1
#define LAYER_symbol 2
#define LAYER_navnum 3
#define LAYER_functions 4

/ {

//////////////////////////////////////////////////////////////////////////////
//
// Advanced Home Row Mods (HRM) Example based on
// Sunaku's Keymap v35 -- "Glorious Engrammer"
// - https://github.com/sunaku/glove80-keymaps
//
//////////////////////////////////////////////////////////////////////////////

//
// DIFFICULTY_LEVEL specifies your level of expertise with this keymap.
// It's meant to help newcomers gradually work their way up to mastery.
// You can disable this setting by omitting it or assigning a `0` zero.
//
// #define DIFFICULTY_LEVEL 0 // custom (see defaults below)
// #define DIFFICULTY_LEVEL 1 // novice (500ms)
// #define DIFFICULTY_LEVEL 2 // slower (400ms)
// #define DIFFICULTY_LEVEL 3 // normal (300ms)
// #define DIFFICULTY_LEVEL 4 // faster (200ms)
// #define DIFFICULTY_LEVEL 5 // expert (100ms)
//

#define DIFFICULTY_LEVEL 3

#if defined(DIFFICULTY_LEVEL) && DIFFICULTY_LEVEL > 0
#define DIFFICULTY_THRESHOLD ((6-DIFFICULTY_LEVEL)*100)
#define HOMEY_HOLDING_TIME DIFFICULTY_THRESHOLD
#define INDEX_HOLDING_TIME DIFFICULTY_THRESHOLD
#endif

 behaviors {

     //////////////////////////////////////////////////////////////////////////
     //
     // Miryoku layers and home row mods (ported from my QMK endgame)
     // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
     // - https://github.com/urob/zmk-config#timeless-homerow-mods
     //
     //////////////////////////////////////////////////////////////////////////

     //
     // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
     // for the pinky, ring, and middle fingers (which are assigned to Super,
     // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
     //

#define HOMEY_HOLDING_TYPE "tap-preferred"

    //
    // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
    // home row mod keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
    //

#ifndef HOMEY_HOLDING_TIME
#define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
#endif

    //
    // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //

#define HOMEY_STREAK_DECAY 250

    //
    // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //

#define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat

    //
    // INDEX_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
    // for index fingers (which Miryoku assigns to Shift) on home row keys.
    //

#define INDEX_HOLDING_TYPE "tap-preferred"

    //
    // INDEX_HOLDING_TIME defines how long you need to hold (milliseconds)
    // index finger keys in order to send their modifiers to the computer
    // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
    //

#ifndef INDEX_HOLDING_TIME
#define INDEX_HOLDING_TIME 170
#endif

    //
    // INDEX_STREAK_DECAY defines how long you need to wait (milliseconds)
    // after typing before you can use home row mods again.  It prevents
    // unintended activation of home row mods when you're actively typing.
    //

#define INDEX_STREAK_DECAY 150

    //
    // INDEX_REPEAT_DECAY defines how much time you have left (milliseconds)
    // after tapping a key to hold it again in order to make it auto-repeat.
    //

#define INDEX_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat


#define PINKY_HOLDING_TYPE HOMEY_HOLDING_TYPE
#define PINKY_HOLDING_TIME HOMEY_HOLDING_TIME
#define PINKY_STREAK_DECAY HOMEY_STREAK_DECAY
#define PINKY_REPEAT_DECAY HOMEY_REPEAT_DECAY

#define RING1_HOLDING_TYPE HOMEY_HOLDING_TYPE
#define RING1_HOLDING_TIME HOMEY_HOLDING_TIME
#define RING1_STREAK_DECAY HOMEY_STREAK_DECAY
#define RING1_REPEAT_DECAY HOMEY_REPEAT_DECAY

#define RING2_HOLDING_TYPE HOMEY_HOLDING_TYPE
#define RING2_HOLDING_TIME HOMEY_HOLDING_TIME
#define RING2_STREAK_DECAY HOMEY_STREAK_DECAY
#define RING2_REPEAT_DECAY HOMEY_REPEAT_DECAY

#define MIDDY_HOLDING_TYPE HOMEY_HOLDING_TYPE
#define MIDDY_HOLDING_TIME HOMEY_HOLDING_TIME
#define MIDDY_STREAK_DECAY HOMEY_STREAK_DECAY
#define MIDDY_REPEAT_DECAY HOMEY_REPEAT_DECAY

#define LEFT_PINKY_HOLDING_TYPE PINKY_HOLDING_TYPE
#define LEFT_PINKY_HOLDING_TIME PINKY_HOLDING_TIME
#define LEFT_PINKY_STREAK_DECAY PINKY_STREAK_DECAY
#define LEFT_PINKY_REPEAT_DECAY PINKY_REPEAT_DECAY

#define RIGHT_PINKY_HOLDING_TYPE PINKY_HOLDING_TYPE
#define RIGHT_PINKY_HOLDING_TIME PINKY_HOLDING_TIME
#define RIGHT_PINKY_STREAK_DECAY PINKY_STREAK_DECAY
#define RIGHT_PINKY_REPEAT_DECAY PINKY_REPEAT_DECAY

#define LEFT_RING1_HOLDING_TYPE RING1_HOLDING_TYPE
#define LEFT_RING1_HOLDING_TIME RING1_HOLDING_TIME
#define LEFT_RING1_STREAK_DECAY RING1_STREAK_DECAY
#define LEFT_RING1_REPEAT_DECAY RING1_REPEAT_DECAY

#define RIGHT_RING1_HOLDING_TYPE RING1_HOLDING_TYPE
#define RIGHT_RING1_HOLDING_TIME RING1_HOLDING_TIME
#define RIGHT_RING1_STREAK_DECAY RING1_STREAK_DECAY
#define RIGHT_RING1_REPEAT_DECAY RING1_REPEAT_DECAY

#define LEFT_RING2_HOLDING_TYPE RING2_HOLDING_TYPE
#define LEFT_RING2_HOLDING_TIME RING2_HOLDING_TIME
#define LEFT_RING2_STREAK_DECAY RING2_STREAK_DECAY
#define LEFT_RING2_REPEAT_DECAY RING2_REPEAT_DECAY

#define RIGHT_RING2_HOLDING_TYPE RING2_HOLDING_TYPE
#define RIGHT_RING2_HOLDING_TIME RING2_HOLDING_TIME
#define RIGHT_RING2_STREAK_DECAY RING2_STREAK_DECAY
#define RIGHT_RING2_REPEAT_DECAY RING2_REPEAT_DECAY

#define LEFT_MIDDY_HOLDING_TYPE MIDDY_HOLDING_TYPE
#define LEFT_MIDDY_HOLDING_TIME MIDDY_HOLDING_TIME
#define LEFT_MIDDY_STREAK_DECAY MIDDY_STREAK_DECAY
#define LEFT_MIDDY_REPEAT_DECAY MIDDY_REPEAT_DECAY

#define RIGHT_MIDDY_HOLDING_TYPE MIDDY_HOLDING_TYPE
#define RIGHT_MIDDY_HOLDING_TIME MIDDY_HOLDING_TIME
#define RIGHT_MIDDY_STREAK_DECAY MIDDY_STREAK_DECAY
#define RIGHT_MIDDY_REPEAT_DECAY MIDDY_REPEAT_DECAY

#define LEFT_INDEX_HOLDING_TYPE INDEX_HOLDING_TYPE
#define LEFT_INDEX_HOLDING_TIME INDEX_HOLDING_TIME
#define LEFT_INDEX_STREAK_DECAY INDEX_STREAK_DECAY
#define LEFT_INDEX_REPEAT_DECAY INDEX_REPEAT_DECAY

#define RIGHT_INDEX_HOLDING_TYPE INDEX_HOLDING_TYPE
#define RIGHT_INDEX_HOLDING_TIME INDEX_HOLDING_TIME
#define RIGHT_INDEX_STREAK_DECAY INDEX_STREAK_DECAY
#define RIGHT_INDEX_REPEAT_DECAY INDEX_REPEAT_DECAY

   	// Corne
    //
	  //      0  1  2  3  4  5           6  7  8  9 10 11
    //      12 13 14 15 16 17 	      18 19 20 21 22 23
    //      24 25 26 27 28 29		      30 31 32 33 34 35
    //                  36 37 38   39 40 41

    //
    // Home row mods with per-finger configuration settings
    //

#define RIGHT_HAND_KEYS 6 7 8 9 10 11 18 19 21 20 23 22 30 31 32 33 34 35
#define LEFT_HAND_KEYS 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29
#define LEFT_THUMB_KEYS 36 37 38
#define RIGHT_THUMB_KEYS 39 40 41
#define ALL_THUMB_KEYS LEFT_THUMB_KEYS RIGHT_THUMB_KEYS

        left_pinky: homey_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS ALL_THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_pinky: homey_right_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS ALL_THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_ring1: homey_left_ring1 {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_RING1_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS ALL_THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
            quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_ring1: homey_right_ring1 {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_RING1_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS ALL_THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_ring2: homey_left_ring2 {
            compatible = "zmk,behavior-hold-tap";
            flavor =
            LEFT_RING2_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS ALL_THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
            quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_ring2: homey_right_ring2 {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_RING2_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS ALL_THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_middy: homey_left_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor =
            LEFT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS ALL_THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_middy: homey_right_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS ALL_THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        left_index: homey_left_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS ALL_THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        right_index: homey_right_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS ALL_THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  |
            // |      |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  |
            // |      |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |  |
            //                    | mo1 | BS  | Spc |   | Spc | Ent  |     |

            display-name = "Base";
            bindings = <
&kp TAB  &kp Q               &left_ring2 RALT W    &kp E                &kp R                       &kp T                        &kp Y                      &kp U                   &kp I                 &right_ring2 RALT O  &kp P                   &kp RBKT
&kp ESC  &left_pinky LGUI A  &left_ring1 LALT S    &left_middy LCTRL D  &left_index LEFT_SHIFT F    &kp G                        &kp H                      &right_index LSHFT J    &right_middy LCTRL K  &right_ring1 LALT L  &right_pinky LGUI SEMI  &kp SQT
&kp DEL  &kp Z               &kp X                 &kp C                &lt LAYER_symbol V          &kp B                        &kp N                      &lt LAYER_symbol M      &kp COMMA             &kp DOT              &kp FSLH                &kp LBKT
                                                   &mo LAYER_lower      &lt LAYER_navnum BACKSPACE  &lt LAYER_functions SPACE    &lt LAYER_functions SPACE  &lt LAYER_navnum ENTER  &none
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&none       &none         &none         &none         &none         &none           &none   &none   &none   &none   &none  &none
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none   &none   &none   &none  &none
&none       &none         &none         &none         &none         &none           &none   &none   &none   &none   &none  &none
                                        &none         &none         &none           &none   &none   &none
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Symbols";
            bindings = <
 &none  &kp Y      &kp RA(N2)  &kp RA(N3)  &kp GRAVE      &kp EQUAL      &kp N6     &kp RA(E)  &kp N0     &kp N      &kp LS(EQUAL)  &none
 &none  &kp RA(X)  &kp N4      &kp N5      &kp RA(C)      &kp MINUS      &kp RA(Z)  &kp N7     &kp N8     &kp N9     &kp N1         &none
 &none  &kp RA(B)  &kp RA(N4)  &kp RA(N5)  &kp RA(SPACE)  &kp RS(GRAVE)  &kp RA(Q)  &kp LS(Y)  &kp LS(G)  &kp LS(V)  &kp LS(N)      &none
                               &none       &none          &none          &none      &none      &none
            >;
        };

        navnum_layer {
					display-name = "Navnum";
					bindings = <
						&none &kp TAB     &kp HOME        &kp UP_ARROW    &kp END          &kp PG_UP             &kp KP_SLASH  &kp LS(N7)    &kp LS(N8)    &kp LS(N9)  &kp KP_MULTIPLY   &kp SCROLLLOCK
						&none &kp CAPS    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_DN             &kp KP_MINUS  &kp RS(N4)    &kp RS(N5)    &kp LS(N6)  &kp LS(N0)        &kp KP_PLUS
						&none &kp K_APP   &none           &kp F11         &kp F12          &none                 &kp KP_COMMA  &kp RS(N1)    &kp RS(N2)    &kp RS(N3)  &kp KP_DOT        &none
                                              &trans          &trans           &trans                &trans        &trans        &trans
						>;
				};

				fn_layer {
						display-name = "Functions";
            bindings = <
  &none  &kp F1   &kp F2     &kp F3   &kp F4   &kp F5          &kp F6          &kp F7          &kp F8          &kp F9           &kp F10          &none
  &none  &kp INS  &kp PSCRN  &none    &none    &none           &none           &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &mkp MCLK        &msc SCRL_UP
  &none  &none    &none      &kp F11  &kp F12  &none           &msc SCRL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_RIGHT  &msc SCRL_DOWN
                             &none    &kp DEL  &none           &none           &kp ESC         &none
							>;
        };

    };
};
